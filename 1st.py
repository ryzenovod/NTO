# Импортируем модуль math, чтобы использовать математические функции,
# в нашем случае — для вычисления квадратного корня (math.sqrt).
import math

# --- Шаг 1: Чтение входных данных ---

# Считываем первую строку. В ней через пробел даны параметры капсулы:
# x0, y0, z0 - координаты центральной точки цилиндра
# d - диаметр капсулы
# h - высота цилиндрической части
# Функция input().split() читает строку и делит её на части по пробелам.
# Функция map(float, ...) преобразует каждую часть строки в вещественное число.
x0, y0, z0, d, h = map(float, input().split())

# Считываем вторую строку. В ней даны координаты точки, которую мы проверяем:
# x, y, z
x, y, z = map(float, input().split())

# --- Шаг 2: Вычисление основных параметров капсулы ---

# Задаем эпсилон (ε) — очень маленькое число для точного сравнения
# вещественных (нецелых) чисел. Компьютеры не всегда могут хранить
# дроби идеально точно, поэтому вместо прямого сравнения a == b, мы
# проверяем, что числа "очень близки" друг к другу: abs(a - b) <= epsilon.
epsilon = 1e-6

# Радиус капсулы — это половина её диаметра. Он одинаков и для цилиндра,
# и для полусфер на концах.
radius = d / 2

# Найдем верхнюю и нижнюю границы цилиндрической части капсулы по оси Z.
# Центр цилиндра находится в z0, а высота h распределяется поровну вверх и вниз от центра.
z_cylinder_top = z0 + h / 2
z_cylinder_bottom = z0 - h / 2

# --- Шаг 3: Определение, в какой части пространства относительно капсулы находится точка ---

# Теперь нам нужно понять, где находится наша точка (x, y, z) относительно
# разных частей капсулы. Есть три основных варианта:
# 1. Точка по высоте находится на уровне цилиндра (между его верхом и низом).
# 2. Точка находится выше цилиндра (на уровне верхней полусферы).
# 3. Точка находится ниже цилиндра (на уровне нижней полусферы).

# Вариант 1: Точка по высоте (координата z) находится на уровне цилиндрической части.
if z >= z_cylinder_bottom and z <= z_cylinder_top:
    # В этом случае нам важна только дистанция от точки до центральной оси капсулы
    # в горизонтальной плоскости XY. Представьте, что мы смотрим на капсулу сверху.
    # Эта дистанция вычисляется по теореме Пифагора для двух измерений.
    dist_to_axis = math.sqrt((x - x0)**2 + (y - y0)**2)

    # Теперь сравниваем эту дистанцию с радиусом капсулы.
    # Точка на поверхности? Проверяем, что дистанция почти равна радиусу.
    if abs(dist_to_axis - radius) <= epsilon:
        print(0)
    # Точка внутри? Дистанция должна быть меньше радиуса.
    elif dist_to_axis < radius:
        print(1)
    # Иначе точка снаружи.
    else:
        print(-1)

# Вариант 2: Точка по высоте находится ВЫШЕ цилиндрической части.
elif z > z_cylinder_top:
    # В этом случае точка может быть внутри, снаружи или на поверхности
    # верхней полусферы.
    # Центр верхней полусферы находится в точке (x0, y0, z_cylinder_top).
    # Вычисляем расстояние от нашей точки до центра этой полусферы в 3D пространстве.
    # Это снова теорема Пифагора, но уже для трех измерений (x, y, z).
    dist_to_top_center = math.sqrt((x - x0)**2 + (y - y0)**2 + (z - z_cylinder_top)**2)

    # Сравниваем это расстояние с радиусом полусферы.
    if abs(dist_to_top_center - radius) <= epsilon:
        print(0) # На поверхности
    elif dist_to_top_center < radius:
        print(1) # Внутри
    else:
        print(-1) # Снаружи

# Вариант 3: Точка по высоте находится НИЖЕ цилиндрической части.
else: # Этот блок выполнится, если z < z_cylinder_bottom
    # Этот случай аналогичен предыдущему, но для нижней полусферы.
    # Центр нижней полусферы: (x0, y0, z_cylinder_bottom).
    # Вычисляем расстояние от нашей точки до центра этой полусферы.
    dist_to_bottom_center = math.sqrt((x - x0)**2 + (y - y0)**2 + (z - z_cylinder_bottom)**2)

    # Сравниваем расстояние с радиусом.
    if abs(dist_to_bottom_center - radius) <= epsilon:
        print(0) # На поверхности
    elif dist_to_bottom_center < radius:
        print(1) # Внутри
    else:
        print(-1) # Снаружи
